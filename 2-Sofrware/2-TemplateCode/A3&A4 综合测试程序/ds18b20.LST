C51 COMPILER V9.01   DS18B20                                                               09/20/2019 08:40:58 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE DS18B20
OBJECT MODULE PLACED IN ds18b20.OBJ
COMPILER INVOKED BY: D:\YZ\KEILC51\C51\BIN\C51.EXE ds18b20.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "ds18b20.h"
   2          #include "smg.h"
   3          
   4          void Delay1ms(uint y)
   5          {
   6   1              uint x;
   7   1              for( ; y>0; y--)
   8   1              {
   9   2                      for(x=110; x>0; x--);
  10   2              }
  11   1      }
  12          
  13          uchar Ds18b20Init()
  14          {
  15   1              uchar i;
  16   1              DSPORT = 0;                      //将总线拉低480us~960us
  17   1              i = 70; 
  18   1              while(i--);//延时642us
  19   1              DSPORT = 1;                     //然后拉高总线，如果DS18B20做出反应会将在15us~60us后总线拉低
  20   1              i = 0;
  21   1              while(DSPORT)   //等待DS18B20拉低总线
  22   1              {
  23   2                      Delay1ms(1);
  24   2                      i++;
  25   2                      if(i>5)//等待>5MS
  26   2                      {
  27   3                              return 0;//初始化失败
  28   3                      }
  29   2              
  30   2              }
  31   1              return 1;//初始化成功
  32   1      }
  33          
  34          void Ds18b20WriteByte(uchar dat)
  35          {
  36   1              uint i, j;
  37   1      
  38   1              for(j=0; j<8; j++)
  39   1              {
  40   2                      DSPORT = 0;               //每写入一位数据之前先把总线拉低1us
  41   2                      i++;
  42   2                      DSPORT = dat & 0x01;  //然后写入一个数据，从最低位开始
  43   2                      i=6;
  44   2                      while(i--); //延时68us，持续时间最少60us
  45   2                      DSPORT = 1;     //然后释放总线，至少1us给总线恢复时间才能接着写入第二个数值
  46   2                      dat >>= 1;
  47   2              }
  48   1      }
  49          
  50          uchar Ds18b20ReadByte()
  51          {
  52   1              uchar byte, bi;
  53   1              uint i, j;      
  54   1              for(j=8; j>0; j--)
  55   1              {
C51 COMPILER V9.01   DS18B20                                                               09/20/2019 08:40:58 PAGE 2   

  56   2                      DSPORT = 0;//先将总线拉低1us
  57   2                      i++;
  58   2                      DSPORT = 1;//然后释放总线
  59   2                      i++;
  60   2                      i++;//延时6us等待数据稳定
  61   2                      bi = DSPORT;     //读取数据，从最低位开始读取
  62   2                      /*将byte左移一位，然后与上右移7位后的bi，注意移动之后移掉那位补0。*/
  63   2                      byte = (byte >> 1) | (bi << 7);                                           
  64   2                      i = 4;          //读取完之后等待48us再接着读取下一个数
  65   2                      while(i--);
  66   2              }                               
  67   1              return byte;
  68   1      }
  69          
  70          void  Ds18b20ChangTemp()
  71          {
  72   1              Ds18b20Init();
  73   1              Delay1ms(1);
  74   1              Ds18b20WriteByte(0xcc);         //跳过ROM操作命令                
  75   1              Ds18b20WriteByte(0x44);     //温度转换命令
  76   1              //Delay1ms(100);        //等待转换成功，而如果你是一直刷着的话，就不用这个延时了
  77   1         
  78   1      }
  79          
  80          void  Ds18b20ReadTempCom()
  81          {       
  82   1      
  83   1              Ds18b20Init();
  84   1              Delay1ms(1);
  85   1              Ds18b20WriteByte(0xcc);  //跳过ROM操作命令
  86   1              Ds18b20WriteByte(0xbe);  //发送读取温度命令
  87   1      }
  88          
  89          int Ds18b20ReadTemp()
  90          {
  91   1              int temp = 0;
  92   1              uchar tmh, tml;
  93   1              Ds18b20ChangTemp();                             //先写入转换命令
  94   1              Ds18b20ReadTempCom();                   //然后等待转换完后发送读取温度命令
  95   1              tml = Ds18b20ReadByte();                //读取温度值共16位，先读低字节
  96   1              tmh = Ds18b20ReadByte();                //再读高字节
  97   1              temp = tmh;
  98   1              temp <<= 8;
  99   1              temp |= tml;
 100   1              return temp;
 101   1      }
 102          
 103          
 104          
 105          void Tempdatapros(int temp)      
 106          {
 107   1              float tp;  
 108   1              if(temp< 0)                             //当温度值为负数
 109   1              {
 110   2                      DisPlayData[0] = 0x40;    //   -
 111   2                      //因为读取的温度是实际温度的补码，所以减1，再取反求出原码
 112   2                      temp=temp-1;
 113   2                      temp=~temp;
 114   2                      tp=temp;
 115   2                      temp=tp*0.0625*100+0.5; 
 116   2                      //留两个小数点就*100，+0.5是四舍五入，因为C语言浮点数转换为整型的时候把小数点
 117   2                      //后面的数自动去掉，不管是否大于0.5，而+0.5之后大于0.5的就是进1了，小于0.5的就
C51 COMPILER V9.01   DS18B20                                                               09/20/2019 08:40:58 PAGE 3   

 118   2                      //算加上0.5，还是在小数点后面。
 119   2       
 120   2              }
 121   1              else
 122   1              {                       
 123   2                      DisPlayData[0] = 0x00;
 124   2                      tp=temp;//因为数据处理有小数点所以将温度赋给一个浮点型变量
 125   2                      //如果温度是正的那么，那么正数的原码就是补码它本身
 126   2                      temp=tp*0.0625*100+0.5; 
 127   2                      //留两个小数点就*100，+0.5是四舍五入，因为C语言浮点数转换为整型的时候把小数点
 128   2                      //后面的数自动去掉，不管是否大于0.5，而+0.5之后大于0.5的就是进1了，小于0.5的就
 129   2                      //算加上0.5，还是在小数点后面。
 130   2              }
 131   1              DisPlayData[1] = smgduan[temp / 10000];
 132   1              DisPlayData[2] = smgduan[temp % 10000 / 1000];
 133   1              DisPlayData[3] = smgduan[temp % 1000 / 100] | 0x80;
 134   1              DisPlayData[4] = smgduan[temp % 100 / 10];
 135   1              DisPlayData[5] = smgduan[temp % 10];
 136   1              DisPlayData[6] = 0;
 137   1              DisPlayData[7] = 0;
 138   1      }
 139          
 140          void DS18B20_Test(void)
 141          {
 142   1              
 143   1              while(1)
 144   1              {
 145   2                      Tempdatapros(Ds18b20ReadTemp());         //数据处理函数
 146   2                      DigDisplay();//数码管显示函数
 147   2                      if(KeyValue!=DS18B20_TEST)
 148   2                      {
 149   3                              return; 
 150   3                      }
 151   2              }               
 152   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    468    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
